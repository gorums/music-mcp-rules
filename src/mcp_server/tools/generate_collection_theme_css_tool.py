#!/usr/bin/env python3
"""
generate_collection_theme_css_tool.py

MCP Tool: Generates a CSS file (_index.css) for the web navigator, themed by genre distribution.
- Loads .collection_index.json and extracts genre distribution
- Generates CSS variables for each genre (e.g., --genre-rock: #color;)
- Assigns unique, deterministic colors per genre
- Writes base styles for backgrounds, text, highlights, badges
- Overwrites file if force=True, else errors if file exists
- Usage: python -m src.mcp_server.tools.generate_collection_theme_css_tool --output _index.css --force

Auto-generated file: Do not edit _index.css manually. Regenerate using this tool.
"""

from ..mcp_instance import mcp
from ..base_handlers import BaseToolHandler
import os
from datetime import datetime
from typing import Dict, Any, Optional
from src.core.tools.storage import load_collection_index

DEFAULT_OUTPUT = "_index.css"

CSS_HEADER = """/* AUTO-GENERATED FILE: DO NOT EDIT DIRECTLY */
/* Generated by generate_collection_theme_css_tool.py on {date} */
/* To regenerate, run the MCP tool. Customize genre colors by editing this file. */
:root {{
{genre_vars}
}}

body {{
  background: var(--background, #181818);
  color: var(--text, #f8f8f8);
  font-family: 'Segoe UI', 'Arial', sans-serif;
}}

header, footer {{
  background: var(--header-footer, #222);
  color: var(--header-footer-text, #f8f8f8);
}}

aside {{
  background: var(--sidebar, #232323);
  color: var(--sidebar-text, #f8f8f8);
}}

.badge-genre {{
  display: inline-block;
  padding: 0.2em 0.6em;
  border-radius: 0.8em;
  font-size: 0.9em;
  font-weight: 600;
  margin: 0 0.2em;
  color: #fff;
  background: var(--genre-badge, #444);
}}

/* Genre-specific badge colors */
{genre_badges}
"""

def genre_to_var(genre: str) -> str:
    """Convert genre name to a valid CSS variable name."""
    return '--genre-' + genre.lower().replace(' ', '-').replace('/', '-').replace('&', 'and').replace('.', '').replace(',', '').replace('(', '').replace(')', '').replace("'", '').replace('"', '')

def genre_to_class(genre: str) -> str:
    """Convert genre name to a valid CSS class name for badges."""
    return '.badge-genre-' + genre.lower().replace(' ', '-').replace('/', '-').replace('&', 'and').replace('.', '').replace(',', '').replace('(', '').replace(')', '').replace("'", '').replace('"', '')

def genre_color_palette(n: int) -> list:
    """Generate a palette of n visually distinct colors."""
    import colorsys
    hues = [(i / max(n, 1)) for i in range(n)]
    return [
        '#{:02x}{:02x}{:02x}'.format(*[int(x * 255) for x in colorsys.hsv_to_rgb(h, 0.55, 0.85)])
        for h in hues
    ]

def assign_genre_colors(genres: list) -> Dict[str, str]:
    """Assign a unique color to each genre deterministically."""
    genres_sorted = sorted(genres)
    palette = genre_color_palette(len(genres_sorted))
    return {g: palette[i] for i, g in enumerate(genres_sorted)}

class GenerateCollectionThemeCSSHandler(BaseToolHandler):
    """Handler for the generate_collection_theme_css MCP tool."""
    def __init__(self):
        super().__init__("generate_collection_theme_css", "1.0.0")

    def _execute_tool(self, output_path: Optional[str] = None, force: bool = False) -> Dict[str, Any]:
        output_path = output_path or DEFAULT_OUTPUT
        response = {
            'status': 'success',
            'message': '',
            'file_operations': {
                'output_file': output_path,
                'overwritten': False,
                'last_updated': '',
            },
            'tool_info': {
                'tool_name': 'generate_collection_theme_css',
                'version': self.version,
                'execution_time': datetime.now().isoformat(timespec='seconds'),
                'parameters_used': {'output_path': output_path, 'force': force}
            }
        }
        if os.path.exists(output_path) and not force:
            response['status'] = 'error'
            response['message'] = f"{output_path} exists. Use force=True to overwrite."
            return response
        # Load collection index
        try:
            index = load_collection_index()
        except Exception as e:
            response['status'] = 'error'
            response['message'] = f"Failed to load collection index: {e}"
            return response
        if not index or not index.stats.top_genres:
            response['status'] = 'error'
            response['message'] = 'No genre data found in collection index.'
            return response
        genres = list(index.stats.top_genres.keys())
        genre_colors = assign_genre_colors(genres)
        genre_vars = '\n'.join([f"  {genre_to_var(g)}: {c};" for g, c in genre_colors.items()])
        genre_badges = '\n'.join([
            f"{genre_to_class(g)} {{ background: {c}; }}" for g, c in genre_colors.items()
        ])
        css = CSS_HEADER.format(
            date=datetime.now().isoformat(timespec='seconds'),
            genre_vars=genre_vars,
            genre_badges=genre_badges
        )
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(css)
        response['file_operations']['overwritten'] = True
        response['file_operations']['last_updated'] = datetime.now().isoformat(timespec='seconds')
        response['message'] = f"Generated {output_path} with {len(genres)} genre variables."
        return response

_handler = GenerateCollectionThemeCSSHandler()

@mcp.tool()
def generate_collection_theme_css_tool(
    output_path: str = DEFAULT_OUTPUT,
    force: bool = False
) -> Dict[str, Any]:
    """
    Generate a CSS file (_index.css) themed by the collection's genre distribution.

    This MCP tool generates a CSS file with CSS variables for each genre found in your collection. Each genre is assigned a unique color, and base styles are provided for the web navigator. Re-running with force=True will overwrite the file.

    Parameters:
        output_path (str): Output CSS file path (default: _index.css)
        force (bool): Overwrite output file if it exists (default: False)

    Returns:
        Dict[str, Any]:
            status: 'success' or 'error'
            message: Human-readable status message
            file_operations: Details about the generated file
            tool_info: Tool name, version, execution time, parameters used

    Usage Example:
        {
            "tool": "generate_collection_theme_css_tool",
            "arguments": {
                "output_path": "_index.css",
                "force": true
            }
        }

    Notes:
        - The generated CSS file is auto-generated. Do not edit manually.
        - To customize theme colors, edit the generated CSS file.
        - The tool uses the genre distribution from .collection_index.json.
        - Re-running with force=True will overwrite the output file.
    """
    return _handler.execute(output_path=output_path, force=force) 